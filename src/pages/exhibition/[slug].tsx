import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import { GetServerSideProps, GetStaticPaths, GetStaticProps } from 'next'
import { GraphQLClient, gql } from 'graphql-request'
import Link from 'next/link'

const client = new GraphQLClient(process.env.NEXT_PUBLIC_GRAPHCMS_URL as string)

// type IEvent = {
//   exhibition: Exhibitions[];
// };

interface IEvent {
  id: string
  slug: string
  title: string
  date: string
  image: {
    id: string
    url: string
  }
  description: string
  content: { html: string }
}

export default function Exhibition({ exhibition }: { exhibition: IEvent }) {
  // console.log(`====> Exhibitions`, exhibition);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>{exhibition.title}</h1>
        <h3>{exhibition.description}</h3>
        <small>{exhibition.date}</small>
        <img src={exhibition.image.url} alt={exhibition.title} />
        <div dangerouslySetInnerHTML={{ __html: exhibition.content.html }} />
      </main>
    </>
  )
}

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const slug = params.slug as string

  console.log(slug)

  const query = gql`
    query Exhibition($slug: String!) {
      exhibition(where: { slug: $slug }) {
        id
        slug
        title
        date
        description
        image {
          id
          url(transformation: { document: { output: { format: webp } } })
        }
        content {
          html
        }
      }
    }
  `

  const data: { exhibition: IEvent | null } = await client.request(query, {
    slug,
  })

  // console.log(`=====> DATA`, data);

  if (!data.exhibition) {
    return {
      notFound: true,
    }
  }

  // const source = await serialize(data.event.description);

  return {
    // props: { event: { ...data.event, source } },
    props: { exhibition: { ...data.exhibition } },
    // revalidate: 60 * 60,
    revalidate: 60,
  }
}

export const getStaticPaths: GetStaticPaths = async () => {
  const query = gql`
    query Exhibitions {
      exhibitions {
        slug
      }
    }
  `
  const data = await client.request(query)

  // console.log(`====> slug`, data);

  return {
    paths: data.exhibitions.map((exhibition) => ({
      params: { slug: exhibition.slug },
    })),
    fallback: 'blocking',
  }
}
